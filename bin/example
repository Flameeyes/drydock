#!/usr/bin/env ruby

# Seafaring Drydock Examples
# 
# This is a functioning script so you can copy it, run it, 
# and just generally be a longshoreman about things. This is
# a Drydock after all. 
#
# If you're reading this via the Rdocs you won't see the code. Try:
#
# http://github.com/delano/drydock/blob/master/bin/example

$:.unshift File.expand_path(File.join(File.dirname(__FILE__), '..')), 'lib'

require 'drydock'

default :welcome

before do
# You can execute a block before the requests command is executed. Instance
# variables defined here will be available to all commands.
end

after do
# And this will be called after the command. 
end

command :welcome do
# Example: ruby bin/example
  
  puts "Welcome to Drydock. You have the following commands:"
  
  # The commands method returns a hash of Drydock::Command objects
  puts commands.keys.inject([]) { |list, command| list << command.to_s }.sort.join(', ')
end

usage "Example: #{$0} laugh [-f]"
option :f, :faster, "A boolean value. Go even faster!"
command :laugh do |obj|
# +obj+ is an instance of Drydock::Command. The options you define are available
# via accessors in this object. 

  answer = !obj.faster ? "Sort of" : "Yes! I'm literally laughing as fast as possible."

  puts "Captain Stubing: Are you laughing?"
  puts "Dr. Bricker: " << answer
end

global_usage "USAGE: #{File.basename($0)} [global options] command [command options]"
global_option :s, :seconds, "Display values in seconds"
global_option :v, :verbose, "Verbosity level (i.e. -vvv is greater than -v)" do |v|
# Use instance variables to maintain values between option blocks. 
# This will increment for every -v found (i.e. -vvv)
  @val ||= 0
  @val += 1
end


usage "#{$0} [-s] [-vv] date"
command :date do |obj, argv| 
# +argv+ is an array containing the unnamed arguments
  require 'time'
  now = Time.now
  puts "(Not verbose enough. Try adding a -v.)" if (obj.verbose || 0) == 1
  puts "More verbosely, the date is now: " if (obj.verbose || 0) >= 2
  puts (obj.seconds) ? now.to_i : now.to_s
end

usage "#{$0} rogue"
ignore :options
command :rogue do |obj, argv|
# You can use ignore :options to tell Drydock to not process the 
# command-specific options. 
  if argv.empty?
    puts "Had you supplied some arguments, I would have ignored them."
  else
    puts "Hi! You supplied some arguments but I ignored them."
    puts "They're all still here in this array: %s" % argv.join(', ')
  end
end

class JohnWestSmokedOysters < Drydock::Command; end;
# You can write your own command classes by inheriting from Drydock::Command
# and referencing it in the command definition.

command :oysters => JohnWestSmokedOysters do |obj|
  p obj  # => #<JohnWestSmokedOysters:0x42179c ... >
end

option :c, :check, "Check response codes for each URI"
option :d, :delim, String, "Output delimiter"
option :t, :timeout, Float, "Timeout value for HTTP request" do |v|
  # You can provide an block to process the option value. 
  # This block must return the final value. 
  v = 10 if (v > 10)
  v
end

usage 'echo "http://github.com/" | ruby bin/example process -c -d " " -t 15 http://solutious.com/'
command :processuri do |obj, argv, stdin|
# +cmd+ is the string used to evoke this command. Useful with alias_command (see below).
# +stdin+ is either an IO object or a custom object defined with a stdin block (see below)

  require 'net/http'
  require 'uri'
  require 'timeout'
  
  uris = [stdin, argv].flatten        # Combine the argv and stdin arrays
  delim = obj.delim || ','
  timeout = obj.timeout || 5
  code = :notchecked                  # The default code when :check is false
  
  if uris.empty?
    puts "Frylock: You didn't provide any URIs. "
    puts "Master Shake: Ya, see #{$0} #{obj.alias} -h"
    exit 0
  end
  
  uris.each_with_index do |uri, index|
    code = response_code(uri, timeout) if (obj.check)
    puts [index+1, uri, code].join(delim)
  end
end
alias_command :checkuri, :processuri




stdin do |stdin, output|
# Pre-process STDIN for all commands. This example returns an array of lines. 
# The command processuris uses this array.
  
  # We only want piped data. If this is not included  
  # execution will wait for input from the user.
  unless stdin.tty?   
    
    while !stdin.eof? do
      line = stdin.readline
      line.chomp!
      (output ||= []) << line
    end
    
  end
  output
end



# response_code
#
# return the HTTP response code for the given URI
# +uri+ A valid HTTP URI
# +duration+ The timeout threshold (in seconds) for the request. 
def response_code(uri_str, duration=5) #:nodoc:
  response = :unavailable
  begin 
    uri = (uri_str.kind_of? URI::HTTP) ? uri_str : URI.parse(uri_str) 
    timeout(duration) do
      response = Net::HTTP.get_response(uri).code
    end 
  rescue Exception => ex
  end
  response
end

