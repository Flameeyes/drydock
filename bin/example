#!/usr/bin/env ruby

DRYDOCK_HOME = File.expand_path(File.join(File.dirname(__FILE__), '..'))
$: << File.join(DRYDOCK_HOME, 'lib')

require 'rubygems'
require 'drydock'

default :welcome


before do
# You can execute a block before the requests command is executed. Instance
# variables defined here will be available to all commands.
end


command :welcome do
# Example: ruby bin/example

  puts "Meatwad: Science is a mystery to man, isn't it Frylock?"
  print "Frylock: At least we have some commands: "
  
  # The commands method returns a hash of Drydock::Command objects
  puts commands.keys.inject([]) { |list, command| list << command.to_s }.sort.join(', ')
end


option :f, :found, "A boolean value. Did you find the car?"
command :findcar do |options|
# +options+ is a hash containing the options defined above
# Example: ruby bin/example -f findcar
  
  puts "Frylock: So, did they ever find your car?"
  
  # The keys to the hash are the long string from the option definition.
  # If only the short string is provided, those will be used instead (i.e. :f). 
  puts (!options[:found]) ? "Carl: No" : 
    "Carl: Oh, they found part of it, hangin' from a trestle near the turnpike."
end



global_usage "USAGE: #{File.basename($0)} [global options] command [command options]"
global_option :s, :seconds, "Display values in seconds"
global_option :v, :verbose, "Verbosity level (i.e. -vvv is greater than -v)" do |v|
# Use instance variables to maintain values between option blocks. 
# This will increment for every -v found (i.e. -vvv)
  @val ||= 0
  @val += 1
end


usage "ruby bin/example [--seconds] [-vv] time"
command :date do |options, argv, global_options| 
# +argv+ contains the unnamed arguments
# +global_options+ contains hash of the options defined with global_options
  
  require 'time'
  now = Time.now
  puts "More verbosely, the date is now: " if (global_options[:verbose] || 0) >= 2
  puts (global_options[:seconds]) ? now.to_i : now.to_s
end


option :c, :check, "Check response codes for each URI"
option :d, :delim, String, "Output delimiter"
option :t, :timeout, Float, "Timeout value for HTTP request" do |v|
  # You can provide an block to process the option value. 
  # This block must return the final value. 
  v = 10 if (v > 10)
  v
end

usage 'echo "http://github.com/" | ruby bin/example process -c -d " " -t 15 http://solutious.com/'
command :processuris do |options, argv, global_options, stdin, cmd|
# +stdin+ is either an IO object or a custom object defined with a stdin block (see below)
# +cmd+ is the string used to evoke this command. Useful with alias_command (see below).

  require 'net/http'
  require 'uri'
  require 'timeout'
  
  uris = [stdin, argv].flatten        # Combine the argv and stdin arrays
  delim = options[:delim] || ','
  timeout = options[:timeout] || 5
  code = :notchecked                  # The default code when :check is false
  
  if uris.empty?
    puts "Frylock: You didn't provide any URIs. "
    puts "Master Shake: Ya, see #{$0} #{cmd} -h"
    exit 0
  end
  
  uris.each_with_index do |uri, index|
    code = response_code(uri, timeout) if (options[:check])
    puts [index+1, uri, code].join(delim)
  end
end
alias_command :process, :processuris




stdin do |stdin, output|
# Pre-process STDIN for all commands. This example returns an array of lines. 
# The command processuris uses this array.
  
  # We only want piped data. If this is not included  
  # execution will wait for input from the user.
  unless stdin.tty?   
    
    while !stdin.eof? do
      line = stdin.readline
      line.chomp!
      (output ||= []) << line
    end
    
  end
  output
end



# response_code
#
# return the HTTP response code for the given URI
# +uri+ A valid HTTP URI
# +duration+ The timeout threshold (in seconds) for the request. 
def response_code(uri_str, duration=5)
  response = :unavailable
  begin 
    uri = (uri_str.kind_of? URI::HTTP) ? uri_str : URI.parse(uri_str) 
    timeout(duration) do
      response = Net::HTTP.get_response(uri).code
    end 
  rescue Exception => ex
  end
  response
end


at_exit do
# This is an example of how to call Frylock in your script. 
  begin    
    Drydock.run!(ARGV, STDIN) 
    
  rescue Drydock::UnknownCommand => ex
    STDERR.puts "Frylock: I don't know what the #{ex.name} command is. #{$/}"
    STDERR.puts "Master Shake: I'll tell you what it is, friends... it's shut up and let me eat it."
    
  rescue Drydock::NoCommandsDefined => ex
    STDERR.puts "Frylock: Carl, I don't want it. And I'd appreciate it if you'd define at least one command. #{$/}"
    STDERR.puts "Carl: Fryman, don't be that way! This sorta thing happens every day! People just don't... you know, talk about it this loud."
  
  rescue Drydock::InvalidArgument => ex
    STDERR.puts "Frylock: Shake, how many arguments have you not provided a value for this year? #{$/}"
    STDERR.puts "Master Shake: A *lot* more than *you* have! (#{@args.join(', ')})"
  
  rescue Drydock::MissingArgument => ex
    STDERR.puts "Frylock: I don't know what #{ex.args.join(', ')} is. #{$/}"
    STDERR.puts "Master Shake: I'll tell you what it is, friends... it's shut up and let me eat it."
  
  rescue => ex
    STDERR.puts "Master Shake: Okay, but when we go in, watch your step. "
    STDERR.puts "Frylock: Why?"
    STDERR.puts "Meatwad: [explosion] #{ex.message}"
    STDERR.puts ex.backtrace
  end
end
